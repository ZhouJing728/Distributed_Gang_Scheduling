// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MESSAGES/message.proto

#ifndef PROTOBUF_INCLUDED_MESSAGES_2fmessage_2eproto
#define PROTOBUF_INCLUDED_MESSAGES_2fmessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_MESSAGES_2fmessage_2eproto 

namespace protobuf_MESSAGES_2fmessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_MESSAGES_2fmessage_2eproto
namespace Message {
namespace protobuf {
class Job_gang;
class Job_gangDefaultTypeInternal;
extern Job_gangDefaultTypeInternal _Job_gang_default_instance_;
class Message_from_Local;
class Message_from_LocalDefaultTypeInternal;
extern Message_from_LocalDefaultTypeInternal _Message_from_Local_default_instance_;
class schedule;
class scheduleDefaultTypeInternal;
extern scheduleDefaultTypeInternal _schedule_default_instance_;
class start_time;
class start_timeDefaultTypeInternal;
extern start_timeDefaultTypeInternal _start_time_default_instance_;
class task;
class taskDefaultTypeInternal;
extern taskDefaultTypeInternal _task_default_instance_;
}  // namespace protobuf
}  // namespace Message
namespace google {
namespace protobuf {
template<> ::Message::protobuf::Job_gang* Arena::CreateMaybeMessage<::Message::protobuf::Job_gang>(Arena*);
template<> ::Message::protobuf::Message_from_Local* Arena::CreateMaybeMessage<::Message::protobuf::Message_from_Local>(Arena*);
template<> ::Message::protobuf::schedule* Arena::CreateMaybeMessage<::Message::protobuf::schedule>(Arena*);
template<> ::Message::protobuf::start_time* Arena::CreateMaybeMessage<::Message::protobuf::start_time>(Arena*);
template<> ::Message::protobuf::task* Arena::CreateMaybeMessage<::Message::protobuf::task>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Message {
namespace protobuf {

// ===================================================================

class schedule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Message.protobuf.schedule) */ {
 public:
  schedule();
  virtual ~schedule();

  schedule(const schedule& from);

  inline schedule& operator=(const schedule& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  schedule(schedule&& from) noexcept
    : schedule() {
    *this = ::std::move(from);
  }

  inline schedule& operator=(schedule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const schedule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const schedule* internal_default_instance() {
    return reinterpret_cast<const schedule*>(
               &_schedule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(schedule* other);
  friend void swap(schedule& a, schedule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline schedule* New() const final {
    return CreateMaybeMessage<schedule>(NULL);
  }

  schedule* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<schedule>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const schedule& from);
  void MergeFrom(const schedule& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(schedule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Message.protobuf.task tasks = 8;
  int tasks_size() const;
  void clear_tasks();
  static const int kTasksFieldNumber = 8;
  ::Message::protobuf::task* mutable_tasks(int index);
  ::google::protobuf::RepeatedPtrField< ::Message::protobuf::task >*
      mutable_tasks();
  const ::Message::protobuf::task& tasks(int index) const;
  ::Message::protobuf::task* add_tasks();
  const ::google::protobuf::RepeatedPtrField< ::Message::protobuf::task >&
      tasks() const;

  // .Message.protobuf.start_time start_time = 9;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 9;
  private:
  const ::Message::protobuf::start_time& _internal_start_time() const;
  public:
  const ::Message::protobuf::start_time& start_time() const;
  ::Message::protobuf::start_time* release_start_time();
  ::Message::protobuf::start_time* mutable_start_time();
  void set_allocated_start_time(::Message::protobuf::start_time* start_time);

  // @@protoc_insertion_point(class_scope:Message.protobuf.schedule)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Message::protobuf::task > tasks_;
  ::Message::protobuf::start_time* start_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_MESSAGES_2fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class task : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Message.protobuf.task) */ {
 public:
  task();
  virtual ~task();

  task(const task& from);

  inline task& operator=(const task& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  task(task&& from) noexcept
    : task() {
    *this = ::std::move(from);
  }

  inline task& operator=(task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const task* internal_default_instance() {
    return reinterpret_cast<const task*>(
               &_task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(task* other);
  friend void swap(task& a, task& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline task* New() const final {
    return CreateMaybeMessage<task>(NULL);
  }

  task* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<task>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const task& from);
  void MergeFrom(const task& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(task* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string task_id = 2;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 2;
  const ::std::string& task_id() const;
  void set_task_id(const ::std::string& value);
  #if LANG_CXX11
  void set_task_id(::std::string&& value);
  #endif
  void set_task_id(const char* value);
  void set_task_id(const char* value, size_t size);
  ::std::string* mutable_task_id();
  ::std::string* release_task_id();
  void set_allocated_task_id(::std::string* task_id);

  // string path = 22;
  void clear_path();
  static const int kPathFieldNumber = 22;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // int32 duration_ms = 3;
  void clear_duration_ms();
  static const int kDurationMsFieldNumber = 3;
  ::google::protobuf::int32 duration_ms() const;
  void set_duration_ms(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.protobuf.task)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr task_id_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::int32 duration_ms_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_MESSAGES_2fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class start_time : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Message.protobuf.start_time) */ {
 public:
  start_time();
  virtual ~start_time();

  start_time(const start_time& from);

  inline start_time& operator=(const start_time& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  start_time(start_time&& from) noexcept
    : start_time() {
    *this = ::std::move(from);
  }

  inline start_time& operator=(start_time&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const start_time& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const start_time* internal_default_instance() {
    return reinterpret_cast<const start_time*>(
               &_start_time_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(start_time* other);
  friend void swap(start_time& a, start_time& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline start_time* New() const final {
    return CreateMaybeMessage<start_time>(NULL);
  }

  start_time* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<start_time>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const start_time& from);
  void MergeFrom(const start_time& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(start_time* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 hour = 4;
  void clear_hour();
  static const int kHourFieldNumber = 4;
  ::google::protobuf::int32 hour() const;
  void set_hour(::google::protobuf::int32 value);

  // int32 min = 5;
  void clear_min();
  static const int kMinFieldNumber = 5;
  ::google::protobuf::int32 min() const;
  void set_min(::google::protobuf::int32 value);

  // int32 sec = 6;
  void clear_sec();
  static const int kSecFieldNumber = 6;
  ::google::protobuf::int32 sec() const;
  void set_sec(::google::protobuf::int32 value);

  // int64 ms = 7;
  void clear_ms();
  static const int kMsFieldNumber = 7;
  ::google::protobuf::int64 ms() const;
  void set_ms(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Message.protobuf.start_time)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 hour_;
  ::google::protobuf::int32 min_;
  ::google::protobuf::int32 sec_;
  ::google::protobuf::int64 ms_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_MESSAGES_2fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Job_gang : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Message.protobuf.Job_gang) */ {
 public:
  Job_gang();
  virtual ~Job_gang();

  Job_gang(const Job_gang& from);

  inline Job_gang& operator=(const Job_gang& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Job_gang(Job_gang&& from) noexcept
    : Job_gang() {
    *this = ::std::move(from);
  }

  inline Job_gang& operator=(Job_gang&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Job_gang& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Job_gang* internal_default_instance() {
    return reinterpret_cast<const Job_gang*>(
               &_Job_gang_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Job_gang* other);
  friend void swap(Job_gang& a, Job_gang& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Job_gang* New() const final {
    return CreateMaybeMessage<Job_gang>(NULL);
  }

  Job_gang* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Job_gang>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Job_gang& from);
  void MergeFrom(const Job_gang& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Job_gang* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string job_path = 12;
  void clear_job_path();
  static const int kJobPathFieldNumber = 12;
  const ::std::string& job_path() const;
  void set_job_path(const ::std::string& value);
  #if LANG_CXX11
  void set_job_path(::std::string&& value);
  #endif
  void set_job_path(const char* value);
  void set_job_path(const char* value, size_t size);
  ::std::string* mutable_job_path();
  ::std::string* release_job_path();
  void set_allocated_job_path(::std::string* job_path);

  // int32 job_id = 10;
  void clear_job_id();
  static const int kJobIdFieldNumber = 10;
  ::google::protobuf::int32 job_id() const;
  void set_job_id(::google::protobuf::int32 value);

  // int32 requested_processors = 11;
  void clear_requested_processors();
  static const int kRequestedProcessorsFieldNumber = 11;
  ::google::protobuf::int32 requested_processors() const;
  void set_requested_processors(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.protobuf.Job_gang)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr job_path_;
  ::google::protobuf::int32 job_id_;
  ::google::protobuf::int32 requested_processors_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_MESSAGES_2fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Message_from_Local : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Message.protobuf.Message_from_Local) */ {
 public:
  Message_from_Local();
  virtual ~Message_from_Local();

  Message_from_Local(const Message_from_Local& from);

  inline Message_from_Local& operator=(const Message_from_Local& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message_from_Local(Message_from_Local&& from) noexcept
    : Message_from_Local() {
    *this = ::std::move(from);
  }

  inline Message_from_Local& operator=(Message_from_Local&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message_from_Local& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_from_Local* internal_default_instance() {
    return reinterpret_cast<const Message_from_Local*>(
               &_Message_from_Local_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Message_from_Local* other);
  friend void swap(Message_from_Local& a, Message_from_Local& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message_from_Local* New() const final {
    return CreateMaybeMessage<Message_from_Local>(NULL);
  }

  Message_from_Local* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Message_from_Local>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Message_from_Local& from);
  void MergeFrom(const Message_from_Local& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_from_Local* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string status = 14;
  void clear_status();
  static const int kStatusFieldNumber = 14;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // int32 task_id = 13;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 13;
  ::google::protobuf::int32 task_id() const;
  void set_task_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.protobuf.Message_from_Local)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::int32 task_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_MESSAGES_2fmessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// schedule

// repeated .Message.protobuf.task tasks = 8;
inline int schedule::tasks_size() const {
  return tasks_.size();
}
inline void schedule::clear_tasks() {
  tasks_.Clear();
}
inline ::Message::protobuf::task* schedule::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:Message.protobuf.schedule.tasks)
  return tasks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Message::protobuf::task >*
schedule::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:Message.protobuf.schedule.tasks)
  return &tasks_;
}
inline const ::Message::protobuf::task& schedule::tasks(int index) const {
  // @@protoc_insertion_point(field_get:Message.protobuf.schedule.tasks)
  return tasks_.Get(index);
}
inline ::Message::protobuf::task* schedule::add_tasks() {
  // @@protoc_insertion_point(field_add:Message.protobuf.schedule.tasks)
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Message::protobuf::task >&
schedule::tasks() const {
  // @@protoc_insertion_point(field_list:Message.protobuf.schedule.tasks)
  return tasks_;
}

// .Message.protobuf.start_time start_time = 9;
inline bool schedule::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
inline void schedule::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
}
inline const ::Message::protobuf::start_time& schedule::_internal_start_time() const {
  return *start_time_;
}
inline const ::Message::protobuf::start_time& schedule::start_time() const {
  const ::Message::protobuf::start_time* p = start_time_;
  // @@protoc_insertion_point(field_get:Message.protobuf.schedule.start_time)
  return p != NULL ? *p : *reinterpret_cast<const ::Message::protobuf::start_time*>(
      &::Message::protobuf::_start_time_default_instance_);
}
inline ::Message::protobuf::start_time* schedule::release_start_time() {
  // @@protoc_insertion_point(field_release:Message.protobuf.schedule.start_time)
  
  ::Message::protobuf::start_time* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
inline ::Message::protobuf::start_time* schedule::mutable_start_time() {
  
  if (start_time_ == NULL) {
    auto* p = CreateMaybeMessage<::Message::protobuf::start_time>(GetArenaNoVirtual());
    start_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Message.protobuf.schedule.start_time)
  return start_time_;
}
inline void schedule::set_allocated_start_time(::Message::protobuf::start_time* start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete start_time_;
  }
  if (start_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:Message.protobuf.schedule.start_time)
}

// -------------------------------------------------------------------

// task

// string task_id = 2;
inline void task::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& task::task_id() const {
  // @@protoc_insertion_point(field_get:Message.protobuf.task.task_id)
  return task_id_.GetNoArena();
}
inline void task::set_task_id(const ::std::string& value) {
  
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Message.protobuf.task.task_id)
}
#if LANG_CXX11
inline void task::set_task_id(::std::string&& value) {
  
  task_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Message.protobuf.task.task_id)
}
#endif
inline void task::set_task_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Message.protobuf.task.task_id)
}
inline void task::set_task_id(const char* value, size_t size) {
  
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Message.protobuf.task.task_id)
}
inline ::std::string* task::mutable_task_id() {
  
  // @@protoc_insertion_point(field_mutable:Message.protobuf.task.task_id)
  return task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* task::release_task_id() {
  // @@protoc_insertion_point(field_release:Message.protobuf.task.task_id)
  
  return task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void task::set_allocated_task_id(::std::string* task_id) {
  if (task_id != NULL) {
    
  } else {
    
  }
  task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:Message.protobuf.task.task_id)
}

// int32 duration_ms = 3;
inline void task::clear_duration_ms() {
  duration_ms_ = 0;
}
inline ::google::protobuf::int32 task::duration_ms() const {
  // @@protoc_insertion_point(field_get:Message.protobuf.task.duration_ms)
  return duration_ms_;
}
inline void task::set_duration_ms(::google::protobuf::int32 value) {
  
  duration_ms_ = value;
  // @@protoc_insertion_point(field_set:Message.protobuf.task.duration_ms)
}

// string path = 22;
inline void task::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& task::path() const {
  // @@protoc_insertion_point(field_get:Message.protobuf.task.path)
  return path_.GetNoArena();
}
inline void task::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Message.protobuf.task.path)
}
#if LANG_CXX11
inline void task::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Message.protobuf.task.path)
}
#endif
inline void task::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Message.protobuf.task.path)
}
inline void task::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Message.protobuf.task.path)
}
inline ::std::string* task::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:Message.protobuf.task.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* task::release_path() {
  // @@protoc_insertion_point(field_release:Message.protobuf.task.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void task::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:Message.protobuf.task.path)
}

// -------------------------------------------------------------------

// start_time

// int32 hour = 4;
inline void start_time::clear_hour() {
  hour_ = 0;
}
inline ::google::protobuf::int32 start_time::hour() const {
  // @@protoc_insertion_point(field_get:Message.protobuf.start_time.hour)
  return hour_;
}
inline void start_time::set_hour(::google::protobuf::int32 value) {
  
  hour_ = value;
  // @@protoc_insertion_point(field_set:Message.protobuf.start_time.hour)
}

// int32 min = 5;
inline void start_time::clear_min() {
  min_ = 0;
}
inline ::google::protobuf::int32 start_time::min() const {
  // @@protoc_insertion_point(field_get:Message.protobuf.start_time.min)
  return min_;
}
inline void start_time::set_min(::google::protobuf::int32 value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:Message.protobuf.start_time.min)
}

// int32 sec = 6;
inline void start_time::clear_sec() {
  sec_ = 0;
}
inline ::google::protobuf::int32 start_time::sec() const {
  // @@protoc_insertion_point(field_get:Message.protobuf.start_time.sec)
  return sec_;
}
inline void start_time::set_sec(::google::protobuf::int32 value) {
  
  sec_ = value;
  // @@protoc_insertion_point(field_set:Message.protobuf.start_time.sec)
}

// int64 ms = 7;
inline void start_time::clear_ms() {
  ms_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 start_time::ms() const {
  // @@protoc_insertion_point(field_get:Message.protobuf.start_time.ms)
  return ms_;
}
inline void start_time::set_ms(::google::protobuf::int64 value) {
  
  ms_ = value;
  // @@protoc_insertion_point(field_set:Message.protobuf.start_time.ms)
}

// -------------------------------------------------------------------

// Job_gang

// int32 job_id = 10;
inline void Job_gang::clear_job_id() {
  job_id_ = 0;
}
inline ::google::protobuf::int32 Job_gang::job_id() const {
  // @@protoc_insertion_point(field_get:Message.protobuf.Job_gang.job_id)
  return job_id_;
}
inline void Job_gang::set_job_id(::google::protobuf::int32 value) {
  
  job_id_ = value;
  // @@protoc_insertion_point(field_set:Message.protobuf.Job_gang.job_id)
}

// int32 requested_processors = 11;
inline void Job_gang::clear_requested_processors() {
  requested_processors_ = 0;
}
inline ::google::protobuf::int32 Job_gang::requested_processors() const {
  // @@protoc_insertion_point(field_get:Message.protobuf.Job_gang.requested_processors)
  return requested_processors_;
}
inline void Job_gang::set_requested_processors(::google::protobuf::int32 value) {
  
  requested_processors_ = value;
  // @@protoc_insertion_point(field_set:Message.protobuf.Job_gang.requested_processors)
}

// string job_path = 12;
inline void Job_gang::clear_job_path() {
  job_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Job_gang::job_path() const {
  // @@protoc_insertion_point(field_get:Message.protobuf.Job_gang.job_path)
  return job_path_.GetNoArena();
}
inline void Job_gang::set_job_path(const ::std::string& value) {
  
  job_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Message.protobuf.Job_gang.job_path)
}
#if LANG_CXX11
inline void Job_gang::set_job_path(::std::string&& value) {
  
  job_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Message.protobuf.Job_gang.job_path)
}
#endif
inline void Job_gang::set_job_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  job_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Message.protobuf.Job_gang.job_path)
}
inline void Job_gang::set_job_path(const char* value, size_t size) {
  
  job_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Message.protobuf.Job_gang.job_path)
}
inline ::std::string* Job_gang::mutable_job_path() {
  
  // @@protoc_insertion_point(field_mutable:Message.protobuf.Job_gang.job_path)
  return job_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Job_gang::release_job_path() {
  // @@protoc_insertion_point(field_release:Message.protobuf.Job_gang.job_path)
  
  return job_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Job_gang::set_allocated_job_path(::std::string* job_path) {
  if (job_path != NULL) {
    
  } else {
    
  }
  job_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_path);
  // @@protoc_insertion_point(field_set_allocated:Message.protobuf.Job_gang.job_path)
}

// -------------------------------------------------------------------

// Message_from_Local

// int32 task_id = 13;
inline void Message_from_Local::clear_task_id() {
  task_id_ = 0;
}
inline ::google::protobuf::int32 Message_from_Local::task_id() const {
  // @@protoc_insertion_point(field_get:Message.protobuf.Message_from_Local.task_id)
  return task_id_;
}
inline void Message_from_Local::set_task_id(::google::protobuf::int32 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:Message.protobuf.Message_from_Local.task_id)
}

// string status = 14;
inline void Message_from_Local::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Message_from_Local::status() const {
  // @@protoc_insertion_point(field_get:Message.protobuf.Message_from_Local.status)
  return status_.GetNoArena();
}
inline void Message_from_Local::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Message.protobuf.Message_from_Local.status)
}
#if LANG_CXX11
inline void Message_from_Local::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Message.protobuf.Message_from_Local.status)
}
#endif
inline void Message_from_Local::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Message.protobuf.Message_from_Local.status)
}
inline void Message_from_Local::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Message.protobuf.Message_from_Local.status)
}
inline ::std::string* Message_from_Local::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:Message.protobuf.Message_from_Local.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message_from_Local::release_status() {
  // @@protoc_insertion_point(field_release:Message.protobuf.Message_from_Local.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_from_Local::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:Message.protobuf.Message_from_Local.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace Message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_MESSAGES_2fmessage_2eproto
